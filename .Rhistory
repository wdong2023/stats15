geom_bar(fill = "lightblue") +
ggtitle("Five Years Property Summary") +
xlab("Five Years Property") +
ylab("Count")
ggplot(data2017, aes(x = subway)) +
geom_bar(fill = "lightblue") +
ggtitle("Subway Summary") +
xlab("Availability of Nearby Subways") +
ylab("Count")
table(data2017$DOM<=1) # number of 0 or 1 Days in market
data2017 %>%
filter(DOM<=1) %>%
count(followers) # Do houses sold fast have many followers?
ggplot(data2017, aes(x=DOM,y=followers))+
geom_col(fill="lightblue")
data2017%>%
filter(square>=167) %>% # top 2.5% large houses
count(district)
data2017%>%
filter(square<=37) %>% # bottom 2.5% small houses
count(district)
data2017%>%
filter(square>=167 & district=="ChangPing")
data2017%>%
filter(square<=37 & district=="ChangPing")
table(data2017$square>=167,data2017$district=="ChangPing") #
# proportion of large houses in ChaoYang
set.seed(428)
index <- sample(nrow(data2017),21002,replace = FALSE)
train <- data2017[index,c(2,3,5:22)] # exclude total price
test <- data2017[-index,c(2,3,5:22)] # exclude total price
linear_model <- lm(price~., data = train)
summary(linear_model)
# training MSE
pred_train_lm <- predict(linear_model, train, type="response")
mean((pred_train_lm-train$price)^2)
# testing MSE
pred_test_lm <- predict(linear_model, test, type="response")
mean((pred_test_lm-test$price)^2)
ggplot(data2017, aes(x=bedRoom))+
geom_bar(fill='lightblue', color='black') + # use geom_bar() instead of geom_histogram()
xlab("bedRoom")+ylab("Count")+ggtitle("Number of bedroom Histogram")
mean(data2017$bedRoom)
median(data2017$bedRoom)
quantile(data2017$bedRoom, c(0, 0.025, 0.25, 0.5, 0.75, 0.975, 1))
# 1 house with 0 bed room
table(data2017$bedRoom)
data2017 %>%
slice_max(bedRoom,n=1)
data2017 %>%
slice_min(bedRoom,n=1)
ggplot(data2017, aes(x=bedRoom))+
geom_histogram(fill='lightblue', color='black') + # use geom_bar() instead of geom_histogram()
xlab("bedRoom")+ylab("Count")+ggtitle("Number of bedroom Histogram")
mean(data2017$bedRoom)
median(data2017$bedRoom)
quantile(data2017$bedRoom, c(0, 0.025, 0.25, 0.5, 0.75, 0.975, 1))
# 1 house with 0 bed room
table(data2017$bedRoom)
data2017 %>%
slice_max(bedRoom,n=1)
data2017 %>%
slice_min(bedRoom,n=1)
ggplot(data2017, aes(x=bedRoom))+
geom_bar(fill='lightblue', color='black') +
xlab("bedRoom")+ylab("Count")+ggtitle("Number of bedroom Histogram")
mean(data2017$bedRoom)
median(data2017$bedRoom)
quantile(data2017$bedRoom, c(0, 0.025, 0.25, 0.5, 0.75, 0.975, 1))
# 1 house with 0 bed room
table(data2017$bedRoom)
data2017 %>%
slice_max(bedRoom,n=1)
data2017 %>%
slice_min(bedRoom,n=1)
set.seed(428)
index <- sample(nrow(data2017),21002,replace = FALSE)
train <- data2017[index,c(2,3,5:22)] # exclude total price
test <- data2017[-index,c(2,3,5:22)] # exclude total price
linear_model <- lm(price~., data = train)
summary(linear_model)
# training MSE
pred_train_lm <- predict(linear_model, train, type="response")
mean((pred_train_lm-train$price)^2)
# testing MSE
pred_test_lm <- predict(linear_model, test, type="response")
mean((pred_test_lm-test$price)^2)
library(leaps)
library("leaps")
knitr::include_graphics("beijing_map.jpeg")
# loading libraries
library(lubridate)
library(dplyr)
library(VIM)
library(stringr)
library(ggplot2)
library(naniar)
library(waffle)
# the following code is used to import dataset that includes Chinese character
data <- read.csv("new.csv", fileEncoding = "GBK", encoding = "GBK")
data2017 <- data %>%
mutate(year = year(tradeTime), month = month.name[month(tradeTime)], day = day(tradeTime)) %>%
filter(year == 2017)
data2017 <- data2017 %>%
mutate(totalFloor = as.numeric(str_extract(floor, "(\\d)+")),
floorRange = case_when(str_detect(floor, "顶") ~ "top",
str_detect(floor, "高") ~ "high",
str_detect(floor, "中") ~ "midium",
str_detect(floor, "低") ~ "low",
str_detect(floor, "底") ~ "bottom"))
data2017 <- data2017 %>%
rename(livingRoom = drawingRoom, bedRoom = livingRoom) %>%
mutate(constructionTime = as.numeric(constructionTime),
livingRoom = as.numeric(livingRoom),
bedRoom = as.numeric(bedRoom),
bathRoom = as.numeric(bathRoom),
kitchen = as.numeric(kitchen),
subway = as.factor(subway),
elevator = as.factor(elevator),
fiveYearsProperty = as.factor(fiveYearsProperty),
district = recode(district, "1" = "DongCheng",
"2" = "FengTai", "3" = "DaXing", "4" = "DaXing",
"5" = "FangShan", "6" = "ChangPing", "7" = "ChaoYang",
"8" = "HaiDian", "9" = "ShiJingShan", "10" = "XiCheng",
"11" = "TongZhou", "12" = "MenTouGou", "13" = "ShunYi"),
subway = recode(subway, "0" = "not_near_subway", "1" = "near_subway"),
elevator = recode(elevator, "0" = "no", "1" = "yes"),
fiveYearsProperty = recode(fiveYearsProperty, "0" = "no", "1" = "yes"),
renovationCondition = recode(renovationCondition, "1" = "other", "2" = "rough",
"3" = "simplicity", "4" = "hardcover"),
buildingStructure = recode(buildingStructure, "1" = "other", "2" = "mixed",
"3" = "brick&wood", "4" = "brick&concrete",
"5" = "steel-concrete"))
table(is.na(data2017))
na_plot <- aggr(data2017, col=c('skyblue','red'), numbers=TRUE, sortVars=TRUE,
labels=names(data2017), cex.axis=.4, gap=3, ylab=c("Missing data","Pattern"))
data2017 <- na.omit(data2017)
data2017 <- data2017 %>%
select(-c(url, Lng, Lat, Cid, tradeTime, floor, buildingType, communityAverage, year))
ggplot(data2017, aes(x = month)) +
geom_bar(fill = "light blue") +
scale_x_discrete(limits = month.name)
ggplot(data2017, aes(x = day)) +
geom_histogram(fill = "light blue", color = "black", bins = 31)
quantile(data2017$day)
ggplot(data2017, aes(x = totalFloor)) + geom_histogram(color = "black", fill = "blue")
quantile(data2017$totalFloor, c(0, .025, .25, .5, .75, .975, 1))
data2017 %>% arrange(desc(totalFloor)) %>% select(id, totalFloor, floorRange) %>% head()
data2017 <- data2017 %>%
filter(totalFloor < 60)
summary_table <- data2017 %>% group_by(floorRange) %>%
summarise(total = n()) %>%
mutate(percent = round(100 * total / sum(total)))
counts <- summary_table$percent
names(counts) <- summary_table$floorRange
print(counts)
waffle(counts)
ggplot(data2017, aes(x=DOM))+
geom_histogram(fill='lightblue', color='black') +
xlab("DOM")+ylab("Count")+ggtitle("Active Days on Market Histogram")
mean(data2017$DOM)
quantile(data2017$DOM, c(0, 0.025, 0.25, 0.5, 0.75, 0.975, 1))
data2017 %>%
filter(DOM<=1) %>%
nrow()  # number of houses have less than 1 day on market
ggplot(data2017, aes(x=followers))+
geom_histogram(fill='lightblue', color='black') +
xlab("followers")+ylab("Count")+
ggtitle("followers Histogram")
mean(data2017$followers)
quantile(data2017$followers, c(0, 0.025, 0.25, 0.5, 0.75, 0.975, 1))
table(data2017$followers==0) # 2021 houses with 0 follower
data2017 %>% filter(followers>1000)
ggplot(data2017, aes(x=totalPrice))+
geom_histogram(fill='lightblue', color='black') +
xlab("totalPrice")+ylab("Count")+ggtitle("Total price (in 10,000yuan) Histogram")
mean(data2017$totalPrice)
quantile(data2017$totalPrice, c(0, 0.025, 0.25, 0.5, 0.75, 0.975, 1))
ggplot(data2017, aes(x=price))+
geom_histogram(fill='lightblue', color='black') +
xlab("price")+ylab("Count")+ggtitle("Average price per square meter (in yuan) Histogram")
mean(data2017$price)
quantile(data2017$price, c(0, 0.025, 0.25, 0.5, 0.75, 0.975, 1))
data2017 %>%
filter(price<=1000)
data2017 <- data2017 %>%
filter(price>1000)
summary(data2017$price)
ggplot(data2017, aes(x=district,y=price))+
geom_boxplot()+
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
ggplot(data2017, aes(x=square))+
geom_histogram(fill='lightblue', color='black') +
xlab("square")+ylab("Count")+ggtitle("square of the House Histogram")
mean(data2017$square)
quantile(data2017$square, c(0, 0.025, 0.25, 0.5, 0.75, 0.975, 1))
data2017 <- data2017 %>%
filter(square < 1000)
ggplot(data2017, aes(x=bedRoom))+
geom_bar(fill='lightblue', color='black') +
xlab("bedRoom")+ylab("Count")+ggtitle("Number of bedroom Histogram")
mean(data2017$bedRoom)
quantile(data2017$bedRoom, c(0, 0.025, 0.25, 0.5, 0.75, 0.975, 1))
data %>%
filter(id=="101101275312")
ggplot(data2017, aes(x=livingRoom))+
geom_bar(fill='lightblue', color='black') + # use geom_bar() instead of geom_histogram()
xlab("livingRoom")+
ylab("Count")+
ggtitle("Number of Living Rooms Histogram")
table(data2017$livingRoom)/length(data2017$livingRoom)
mean(data2017$livingRoom)
quantile(data2017$livingRoom, c(0,0.025,0.25,0.5,0.75,0.975,1))
ggplot(data2017, aes(x=district))+
geom_bar(fill='lightblue', color='black') +
xlab("district")+
ylab("Count")+
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))+
ggtitle("District the House located Histogram")
table(data2017$district)/length(data2017$district) # percentage of houses sold in each district
data2017 %>%
filter(kitchen > 2)
data2017 <- data2017 %>%
filter(kitchen < 3)
ggplot(data2017, aes(x = kitchen)) +
geom_bar(fill = "lightblue") +
ggtitle("Kitchen Summary") +
xlab("Number of Kitchens") +
ylab("Count")
ggplot(data2017, aes(x = bathRoom)) +
geom_bar(fill = "lightblue") +
ggtitle("Bathroom Summary") +
xlab("Number of Bathrooms") +
ylab("Count")
table(data2017$constructionTime)
median(data2017$constructionTime)
mean(data2017$constructionTime)
ggplot(data2017, aes(x = constructionTime)) +
geom_bar(fill = "lightblue") +
ggtitle("Time of Construction Summary") +
xlab("Time of Construction") +
ylab("Count")
ggplot(data2017, aes(x = renovationCondition)) +
geom_bar(fill = "lightblue") +
ggtitle("Condition of Renovation Summary") +
xlab("Condition of Renovation") +
ylab("Count")
ggplot(data2017, aes(x = buildingStructure)) +
geom_bar(fill = "lightblue") +
ggtitle("Structure of Building Summary") +
xlab("Structure of Building") +
ylab("Count")
data2017 <- data2017 %>%
filter(ladderRatio < 5)
table(data2017$ladderRatio)
median(data2017$ladderRatio)
mean(data2017$ladderRatio)
ggplot(data2017, aes(x = ladderRatio)) +
geom_bar(fill = "lightblue", width = 0.05) +
ggtitle("Ladder Ratio Summary") +
xlab("Ladder Ratio") +
ylab("Count")
ggplot(data2017, aes(x = elevator)) +
geom_bar(fill = "lightblue") +
ggtitle("Availability of Elevator") +
xlab("Elevator") +
ylab("Count")
ggplot(data2017, aes(x = fiveYearsProperty)) +
geom_bar(fill = "lightblue") +
ggtitle("Five Years Property Summary") +
xlab("Five Years Property") +
ylab("Count")
ggplot(data2017, aes(x = subway)) +
geom_bar(fill = "lightblue") +
ggtitle("Subway Summary") +
xlab("Availability of Nearby Subways") +
ylab("Count")
table(data2017$DOM<=1) # houses are 0 or 1 Days on market
data2017 %>%
filter(DOM<=1) %>%
count(followers) # Do houses sold fast have many followers?
ggplot(data2017, aes(x=DOM,y=followers))+ # overall number of followers vs. DOM
geom_point(alpha=.1)+
geom_smooth()+
xlim(0,200)
#geom_col(fill="lightblue")
ggplot(data2017, aes(x = constructionTime)) +
geom_bar(fill = "lightblue") +
ggtitle("Distribution of Time of Construction by District") +
xlab("Time of Construction") +
ylab("Count") +
facet_wrap(~ district)
ggplot(data2017, aes(x = renovationCondition)) +
geom_bar(fill = "lightblue") +
ggtitle("Distribution of Renovation Condition by District") +
xlab("Renovation Condition") +
ylab("Count") +
facet_wrap(~ district)
large <- data2017 %>%
filter(square>=149.97) %>% # number of large houses in each district
count(district)
small <- data2017 %>%
filter(square<=38.63) %>% # number of small houses in each district
count(district)
full1 <- small %>%
full_join(large,by="district",suffix = c("_small","_large"))
pivot <- full1 %>%
pivot_longer(col=c("n_large","n_small"))
ggplot(data2017, aes(x = fiveYearsProperty)) +
geom_bar(fill = "lightblue") +
ggtitle("Five Years Property Summary") +xlab("Five Years Property") +ylab("Count")
large <- data2017 %>%
filter(square>=149.97) %>% # number of large houses in each district
count(district)
small <- data2017 %>%
filter(square<=38.63) %>% # number of small houses in each district
count(district)
full1 <- small %>%
full_join(large,by="district",suffix = c("_small","_large"))
pivot <- full1 %>%
pivot_longer(col=c("n_large","n_small"))
library(dplyr)
large <- data2017 %>%
filter(square>=149.97) %>% # number of large houses in each district
count(district)
small <- data2017 %>%
filter(square<=38.63) %>% # number of small houses in each district
count(district)
full1 <- small %>%
full_join(large,by="district",suffix = c("_small","_large"))
pivot <- full1 %>%
pivot_longer(col=c("n_large","n_small"))
library(tidyverse)
large <- data2017 %>%
filter(square>=149.97) %>% # number of large houses in each district
count(district)
small <- data2017 %>%
filter(square<=38.63) %>% # number of small houses in each district
count(district)
full1 <- small %>%
full_join(large,by="district",suffix = c("_small","_large"))
pivot <- full1 %>%
pivot_longer(col=c("n_large","n_small"))
ggplot(pivot,aes(x=district,y=value,fill=name))+
geom_col()+
facet_wrap(~name)+
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
data2017 <- data2017 %>%
filter(square < 1000)
data2017 <- data2017 %>%
filter(square < 1000)
ggplot(data2017, aes(x=square))+
geom_histogram(fill='lightblue', color='black') +
xlab("square")+ylab("Count")+ggtitle("square of the House Histogram")
data2017 <- data2017 %>%
filter(square < 1000)
data2017 %>%
filter(id=="101101275312")
data %>%
filter(id=="101101275312")
#suburb vs. core
core_district <- data2017 %>%
filter(district=="XiCheng" & "DongCheng" & "ChaoYang" & "HaiDian" & "ShiJingShan" & "FengTai")
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai"))
core_district
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai"))
suburb <- data2017 %>%
filter(district %in% c("DaXing", "ChangPing", "FangShan", "MenTouGou", "ShunYi", "TongZhou"))
rbind(core_district,suburb)
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai"))
suburb <- data2017 %>%
filter(district %in% c("DaXing", "ChangPing", "FangShan", "MenTouGou", "ShunYi", "TongZhou"))
all <- rbind(core_district,suburb)
ggplot(all, aes(x=district))+
geom_col()
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai")) %>%
nrow()
suburb <- data2017 %>%
filter(district %in% c("DaXing", "ChangPing", "FangShan", "MenTouGou", "ShunYi", "TongZhou")) %>%
nrow()
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai")) %>%
nrow()
suburb <- data2017 %>%
filter(district %in% c("DaXing", "ChangPing", "FangShan", "MenTouGou", "ShunYi", "TongZhou")) %>%
nrow()
total <- rbind(core_district,suburb)
total
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai")) %>%
nrow()
suburb <- data2017 %>%
filter(district %in% c("DaXing", "ChangPing", "FangShan", "MenTouGou", "ShunYi", "TongZhou")) %>%
nrow()
total <- rbind(core_district,suburb)
ggplot(total)+
geom_col()
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai"))
suburb <- data2017 %>%
filter(district %in% c("DaXing", "ChangPing", "FangShan", "MenTouGou", "ShunYi", "TongZhou"))
total <- rbind(core_district,suburb)
ggplot(total)+
geom_col()
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai"))
suburb <- data2017 %>%
filter(district %in% c("DaXing", "ChangPing", "FangShan", "MenTouGou", "ShunYi", "TongZhou"))
total <- rbind(core_district,suburb)
total
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai"))
suburb <- data2017 %>%
filter(district %in% c("DaXing", "ChangPing", "FangShan", "MenTouGou", "ShunYi", "TongZhou"))
div <- data.fram(core_district,suburb)
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai"))
suburb <- data2017 %>%
filter(district %in% c("DaXing", "ChangPing", "FangShan", "MenTouGou", "ShunYi", "TongZhou"))
div <- data.frame(core_district,suburb)
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai"))
suburb <- data2017 %>%
filter(district %in% c("DaXing", "ChangPing", "FangShan", "MenTouGou", "ShunYi", "TongZhou"))
ggplot(data = core_district)+
geom_col()
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai"))
suburb <- data2017 %>%
filter(district %in% c("DaXing", "ChangPing", "FangShan", "MenTouGou", "ShunYi", "TongZhou"))
ggplot(data = core_district)+
geom_col(aes(x=core_district))
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai"))
suburb <- data2017 %>%
filter(district %in% c("DaXing", "ChangPing", "FangShan", "MenTouGou", "ShunYi", "TongZhou"))
new <- data.frame(core_district,suburb)
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai")) %>%
nrow()
suburb <- data2017 %>%
filter(district %in% c("DaXing", "ChangPing", "FangShan", "MenTouGou", "ShunYi", "TongZhou")) %>%
nrow()
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai")) %>%
nrow()
suburb <- data2017 %>%
filter(district %in% c("DaXing", "ChangPing", "FangShan", "MenTouGou", "ShunYi", "TongZhou")) %>%
nrow()
table(core_district)/length(data2017$district)
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai")) %>%
nrow()
suburb <- data2017 %>%
filter(district %in% c("DaXing", "ChangPing", "FangShan", "MenTouGou", "ShunYi", "TongZhou")) %>%
nrow()
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai")) %>%
nrow()
core_district
suburb <- data2017 %>%
filter(district %in% c("DaXing", "ChangPing", "FangShan", "MenTouGou", "ShunYi", "TongZhou")) %>%
nrow()
suburb
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai")) %>%
nrow()
core_district/length(data2017)
suburb <- data2017 %>%
filter(district %in% c("DaXing", "ChangPing", "FangShan", "MenTouGou", "ShunYi", "TongZhou")) %>%
nrow()
suburb
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai")) %>%
nrow()
core_district/length(data2017$district)
suburb <- data2017 %>%
filter(district %in% c("DaXing", "ChangPing", "FangShan", "MenTouGou", "ShunYi", "TongZhou")) %>%
nrow()
suburb
#suburb vs. core
core_district <- data2017 %>%
filter(district %in% c("XiCheng" , "DongCheng" , "ChaoYang" , "HaiDian" , "ShiJingShan" , "FengTai")) %>%
nrow()
core_district/length(data2017$district)
suburb <- data2017 %>%
filter(district %in% c("DaXing", "ChangPing", "FangShan", "MenTouGou", "ShunYi", "TongZhou")) %>%
nrow()
suburb/length(data2017$district)
